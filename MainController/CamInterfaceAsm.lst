GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 1


   1               	# 1 "CamInterfaceAsm.S"
   1               	;
   0               	
   0               	
   2               	;    Copyright (C) 2004    John Orlando
   3               	;    
   4               	;   AVRcam: a small real-time image processing engine.
   5               	
   6               	;    This program is free software; you can redistribute it and/or
   7               	;    modify it under the terms of the GNU General Public
   8               	;    License as published by the Free Software Foundation; either
   9               	;    version 2 of the License, or (at your option) any later version.
  10               	
  11               	;    This program is distributed in the hope that it will be useful,
  12               	;    but WITHOUT ANY WARRANTY; without even the implied warranty of
  13               	;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  14               	;    General Public License for more details.
  15               	
  16               	;    You should have received a copy of the GNU General Public
  17               	;    License along with this program; if not, write to the Free Software
  18               	;    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  19               	
  20               	;   For more information on the AVRcam, please contact:
  21               	
  22               	;   john@jrobot.net
  23               	
  24               	;   or go to www.jrobot.net for more details regarding the system.
  25               	;**********************************************************************
  26               	;       Module Name: CanInterfaceAsm.S
  27               	;       Module Date: 04/14/2004
  28               	;       Module Auth: John Orlando
  29               	;
  30               	;       Description: This module provides the low-level interface
  31               	;       to the OV6620 camera hardware.  It is responsible for
  32               	;   	acquiring each pixel block (R,G,B), performing the mapping
  33               	;       into an actual color (orange, purple, etc), run-length
  34               	;       encoding the data, and storing the info off to the appropriate
  35               	;       line buffer.  This routine is synchronized with the pixel data
  36               	;       so that no polling of the camera data needs to be done (the
  37               	;       OV6620 is clocked off of the same crystal source as the mega8,
  38               	;       thus providing inherent synchronization between the two).
  39               	;
  40               	;       Revision History:
  41               	;       Date        Rel Ver.    Notes
  42               	;       4/10/2004      0.1     Module created
  43               	;       6/30/2004      1.0     Initial release for Circuit Cellar
  44               	;                              contest.
  45               	;       1/16/2005      1.4     Fixed issue with the TCCR1B register
  46               	;                              where PCLK was getting routed to the
  47               	;                              timer1 even when it wasn't needed.
  48               	;                              This caused excessive counter overflow
  49               	;                              interrupts, and caused problems.  Now,
  50               	;                              the "PCLK" pipe feeds timer1 when needed,
  51               	;                              and is turned off when it isn't needed.
  52               	
  53               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 2


   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id$ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 3


  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 4


 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM161__)
 126               	#  include <avr/io90pwm161.h>
 127               	#elif defined (__AVR_AT90PWM81__)
 128               	#  include <avr/io90pwm81.h>
 129               	#elif defined (__AVR_ATmega8U2__)
 130               	#  include <avr/iom8u2.h>
 131               	#elif defined (__AVR_ATmega16M1__)
 132               	#  include <avr/iom16m1.h>
 133               	#elif defined (__AVR_ATmega16U2__)
 134               	#  include <avr/iom16u2.h>
 135               	#elif defined (__AVR_ATmega16U4__)
 136               	#  include <avr/iom16u4.h>
 137               	#elif defined (__AVR_ATmega32C1__)
 138               	#  include <avr/iom32c1.h>
 139               	#elif defined (__AVR_ATmega32M1__)
 140               	#  include <avr/iom32m1.h>
 141               	#elif defined (__AVR_ATmega32U2__)
 142               	#  include <avr/iom32u2.h>
 143               	#elif defined (__AVR_ATmega32U4__)
 144               	#  include <avr/iom32u4.h>
 145               	#elif defined (__AVR_ATmega32U6__)
 146               	#  include <avr/iom32u6.h>
 147               	#elif defined (__AVR_ATmega64C1__)
 148               	#  include <avr/iom64c1.h>
 149               	#elif defined (__AVR_ATmega64M1__)
 150               	#  include <avr/iom64m1.h>
 151               	#elif defined (__AVR_ATmega128__)
 152               	#  include <avr/iom128.h>
 153               	#elif defined (__AVR_ATmega128A__)
 154               	#  include <avr/iom128a.h>
 155               	#elif defined (__AVR_ATmega1280__)
 156               	#  include <avr/iom1280.h>
 157               	#elif defined (__AVR_ATmega1281__)
 158               	#  include <avr/iom1281.h>
 159               	#elif defined (__AVR_ATmega1284__)
 160               	#  include <avr/iom1284.h>
 161               	#elif defined (__AVR_ATmega1284P__)
 162               	#  include <avr/iom1284p.h>
 163               	#elif defined (__AVR_ATmega128RFA1__)
 164               	#  include <avr/iom128rfa1.h>
 165               	#elif defined (__AVR_ATmega1284RFR2__)
 166               	#  include <avr/iom1284rfr2.h>
 167               	#elif defined (__AVR_ATmega128RFR2__)
 168               	#  include <avr/iom128rfr2.h>
 169               	#elif defined (__AVR_ATmega2564RFR2__)
 170               	#  include <avr/iom2564rfr2.h>
 171               	#elif defined (__AVR_ATmega256RFR2__)
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 5


 172               	#  include <avr/iom256rfr2.h>
 173               	#elif defined (__AVR_ATmega2560__)
 174               	#  include <avr/iom2560.h>
 175               	#elif defined (__AVR_ATmega2561__)
 176               	#  include <avr/iom2561.h>
 177               	#elif defined (__AVR_AT90CAN32__)
 178               	#  include <avr/iocan32.h>
 179               	#elif defined (__AVR_AT90CAN64__)
 180               	#  include <avr/iocan64.h>
 181               	#elif defined (__AVR_AT90CAN128__)
 182               	#  include <avr/iocan128.h>
 183               	#elif defined (__AVR_AT90USB82__)
 184               	#  include <avr/iousb82.h>
 185               	#elif defined (__AVR_AT90USB162__)
 186               	#  include <avr/iousb162.h>
 187               	#elif defined (__AVR_AT90USB646__)
 188               	#  include <avr/iousb646.h>
 189               	#elif defined (__AVR_AT90USB647__)
 190               	#  include <avr/iousb647.h>
 191               	#elif defined (__AVR_AT90USB1286__)
 192               	#  include <avr/iousb1286.h>
 193               	#elif defined (__AVR_AT90USB1287__)
 194               	#  include <avr/iousb1287.h>
 195               	#elif defined (__AVR_ATmega644RFR2__)
 196               	#  include <avr/iom644rfr2.h>
 197               	#elif defined (__AVR_ATmega64RFR2__)
 198               	#  include <avr/iom64rfr2.h>
 199               	#elif defined (__AVR_ATmega64__)
 200               	#  include <avr/iom64.h>
 201               	#elif defined (__AVR_ATmega64A__)
 202               	#  include <avr/iom64a.h>
 203               	#elif defined (__AVR_ATmega640__)
 204               	#  include <avr/iom640.h>
 205               	#elif defined (__AVR_ATmega644__)
 206               	#  include <avr/iom644.h>
 207               	#elif defined (__AVR_ATmega644A__)
 208               	#  include <avr/iom644a.h>
 209               	#elif defined (__AVR_ATmega644P__)
 210               	#  include <avr/iom644p.h>
 211               	#elif defined (__AVR_ATmega644PA__)
 212               	#  include <avr/iom644pa.h>
 213               	#elif defined (__AVR_ATmega645__)
 214               	#  include <avr/iom645.h>
 215               	#elif (defined __AVR_ATmega645A__)
 216               	#include <avr/iom645a.h>
 217               	#elif (defined __AVR_ATmega645P__)
 218               	#include <avr/iom645p.h>
 219               	#elif defined (__AVR_ATmega6450__)
 220               	#  include <avr/iom6450.h>
 221               	#elif (defined __AVR_ATmega6450A__)
 222               	#include <avr/iom6450a.h>
 223               	#elif (defined __AVR_ATmega6450P__)
 224               	#include <avr/iom6450p.h>
 225               	#elif defined (__AVR_ATmega649__)
 226               	#  include <avr/iom649.h>
 227               	#elif (defined __AVR_ATmega649A__)
 228               	#include <avr/iom649a.h>
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 6


 229               	#elif defined (__AVR_ATmega6490__)
 230               	#  include <avr/iom6490.h>
 231               	#elif (defined __AVR_ATmega6490A__)
 232               	#include <avr/iom6490a.h>
 233               	#elif (defined __AVR_ATmega6490P__)
 234               	#include <avr/iom6490p.h>
 235               	#elif defined (__AVR_ATmega649P__)
 236               	#  include <avr/iom649p.h>
 237               	#elif defined (__AVR_ATmega64HVE__)
 238               	#  include <avr/iom64hve.h>
 239               	#elif defined (__AVR_ATmega64HVE2__)
 240               	#  include <avr/iom64hve2.h>
 241               	#elif defined (__AVR_ATmega103__)
 242               	#  include <avr/iom103.h>
 243               	#elif defined (__AVR_ATmega32__)
 244               	#  include <avr/iom32.h>
 245               	#elif defined (__AVR_ATmega32A__)
 246               	#  include <avr/iom32a.h>
 247               	#elif defined (__AVR_ATmega323__)
 248               	#  include <avr/iom323.h>
 249               	#elif defined (__AVR_ATmega324P__)
 250               	#  include <avr/iom324p.h>
 251               	#elif (defined __AVR_ATmega324A__)
 252               	#include <avr/iom324a.h>
 253               	#elif defined (__AVR_ATmega324PA__)
 254               	#  include <avr/iom324pa.h>
 255               	#elif defined (__AVR_ATmega325__)
 256               	#  include <avr/iom325.h>
 257               	#elif (defined __AVR_ATmega325A__)
 258               	#include <avr/iom325a.h>
 259               	#elif defined (__AVR_ATmega325P__)
 260               	#  include <avr/iom325p.h>
 261               	#elif defined (__AVR_ATmega325PA__)
 262               	#  include <avr/iom325pa.h>  
 263               	#elif defined (__AVR_ATmega3250__) 
 264               	#  include <avr/iom3250.h>
 265               	#elif (defined __AVR_ATmega3250A__)
 266               	#include <avr/iom3250a.h>
 267               	#elif defined (__AVR_ATmega3250P__)
 268               	#  include <avr/iom3250p.h>
 269               	#elif defined (__AVR_ATmega3250PA__)
 270               	#  include <avr/iom3250pa.h>  
 271               	#elif defined (__AVR_ATmega328P__)
 272               	#  include <avr/iom328p.h>
 273               	#elif (defined __AVR_ATmega328__)
 274               	#include <avr/iom328.h>
 275               	#elif defined (__AVR_ATmega329__)
 276               	#  include <avr/iom329.h>
 277               	#elif (defined __AVR_ATmega329A__)
 278               	#include <avr/iom329a.h>
 279               	#elif defined (__AVR_ATmega329P__) 
 280               	#  include <avr/iom329p.h>
 281               	#elif (defined __AVR_ATmega329PA__)
 282               	#include <avr/iom329pa.h>
 283               	#elif (defined __AVR_ATmega3290PA__)
 284               	#include <avr/iom3290pa.h>
 285               	#elif defined (__AVR_ATmega3290__)
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 7


 286               	#  include <avr/iom3290.h>
 287               	#elif (defined __AVR_ATmega3290A__)
 288               	#include <avr/iom3290a.h>
 289               	#elif defined (__AVR_ATmega3290P__)
 290               	#  include <avr/iom3290.h>
 291               	#elif defined (__AVR_ATmega32HVB__)
 292               	#  include <avr/iom32hvb.h>
 293               	#elif defined (__AVR_ATmega32HVBREVB__)
 294               	#  include <avr/iom32hvbrevb.h>
 295               	#elif defined (__AVR_ATmega406__)
 296               	#  include <avr/iom406.h>
 297               	#elif defined (__AVR_ATmega16__)
 298               	#  include <avr/iom16.h>
 299               	#elif defined (__AVR_ATmega16A__)
 300               	#  include <avr/iom16a.h>
 301               	#elif defined (__AVR_ATmega161__)
 302               	#  include <avr/iom161.h>
 303               	#elif defined (__AVR_ATmega162__)
 304               	#  include <avr/iom162.h>
 305               	#elif defined (__AVR_ATmega163__)
 306               	#  include <avr/iom163.h>
 307               	#elif defined (__AVR_ATmega164P__)
 308               	#  include <avr/iom164p.h>
 309               	#elif (defined __AVR_ATmega164A__)
 310               	#include <avr/iom164a.h>
 311               	#elif defined (__AVR_ATmega164PA__)
 312               	#  include <avr/iom164pa.h>
 313               	#elif defined (__AVR_ATmega165__)
 314               	#  include <avr/iom165.h>
 315               	#elif defined (__AVR_ATmega165A__)
 316               	#  include <avr/iom165a.h>
 317               	#elif defined (__AVR_ATmega165P__)
 318               	#  include <avr/iom165p.h>
 319               	#elif defined (__AVR_ATmega165PA__)
 320               	#  include <avr/iom165pa.h>
 321               	#elif defined (__AVR_ATmega168__)
 322               	#  include <avr/iom168.h>
 323               	#elif defined (__AVR_ATmega168A__)
 324               	#  include <avr/iom168a.h>
 325               	#elif defined (__AVR_ATmega168P__)
 326               	#  include <avr/iom168p.h>
 327               	#elif defined (__AVR_ATmega168PA__)
 328               	#  include <avr/iom168pa.h>
 329               	#elif defined (__AVR_ATmega168PB__)
 330               	#  include <avr/iom168pb.h>
 331               	#elif defined (__AVR_ATmega169__)
 332               	#  include <avr/iom169.h>
 333               	#elif (defined __AVR_ATmega169A__)
 334               	#include <avr/iom169a.h>
 335               	#elif defined (__AVR_ATmega169P__)
 336               	#  include <avr/iom169p.h>
 337               	#elif defined (__AVR_ATmega169PA__)
 338               	#  include <avr/iom169pa.h>
 339               	#elif defined (__AVR_ATmega8HVA__)
 340               	#  include <avr/iom8hva.h>
 341               	#elif defined (__AVR_ATmega16HVA__)
 342               	#  include <avr/iom16hva.h>
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 8


 343               	#elif defined (__AVR_ATmega16HVA2__)
 344               	#  include <avr/iom16hva2.h>
 345               	#elif defined (__AVR_ATmega16HVB__)
 346               	#  include <avr/iom16hvb.h>
 347               	#elif defined (__AVR_ATmega16HVBREVB__)
 348               	#  include <avr/iom16hvbrevb.h>
 349               	#elif defined (__AVR_ATmega8__)
 350               	#  include <avr/iom8.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz
   2               	   All rights reserved.
   3               	
   4               	   Redistribution and use in source and binary forms, with or without
   5               	   modification, are permitted provided that the following conditions are met:
   6               	
   7               	   * Redistributions of source code must retain the above copyright
   8               	     notice, this list of conditions and the following disclaimer.
   9               	
  10               	   * Redistributions in binary form must reproduce the above copyright
  11               	     notice, this list of conditions and the following disclaimer in
  12               	     the documentation and/or other materials provided with the
  13               	     distribution.
  14               	
  15               	   * Neither the name of the copyright holders nor the names of
  16               	     contributors may be used to endorse or promote products derived
  17               	     from this software without specific prior written permission.
  18               	
  19               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29               	  POSSIBILITY OF SUCH DAMAGE. */
  30               	
  31               	/* $Id: iom8.h 2235 2011-03-17 04:13:14Z arcanum $ */
  32               	
  33               	/* avr/iom8.h - definitions for ATmega8 */
  34               	
  35               	#ifndef _AVR_IOM8_H_
  36               	#define _AVR_IOM8_H_ 1
  37               	
  38               	/* This file should only be included from <avr/io.h>, never directly. */
  39               	
  40               	#ifndef _AVR_IO_H_
  41               	#  error "Include <avr/io.h> instead of this file."
  42               	#endif
  43               	
  44               	#ifndef _AVR_IOXXX_H_
  45               	#  define _AVR_IOXXX_H_ "iom8.h"
  46               	#else
  47               	#  error "Attempt to include more than one <avr/ioXXX.h> file."
  48               	#endif 
  49               	
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 9


  50               	/* I/O registers */
  51               	
  52               	/* TWI stands for "Two Wire Interface" or "TWI Was I2C(tm)" */
  53               	#define TWBR	_SFR_IO8(0x00)
  54               	#define TWSR	_SFR_IO8(0x01)
  55               	#define TWAR	_SFR_IO8(0x02)
  56               	#define TWDR	_SFR_IO8(0x03)
  57               	
  58               	/* ADC */
  59               	#define ADCW	_SFR_IO16(0x04)
  60               	#ifndef __ASSEMBLER__
  61               	#define ADC	_SFR_IO16(0x04)
  62               	#endif
  63               	#define ADCL	_SFR_IO8(0x04)
  64               	#define ADCH	_SFR_IO8(0x05)
  65               	#define ADCSR	_SFR_IO8(0x06)
  66               	#define ADCSRA	_SFR_IO8(0x06)  /* Changed in 2486H-AVR-09/02 */
  67               	#define ADMUX	_SFR_IO8(0x07)
  68               	
  69               	/* analog comparator */
  70               	#define ACSR	_SFR_IO8(0x08)
  71               	
  72               	/* USART */
  73               	#define UBRRL	_SFR_IO8(0x09)
  74               	#define UCSRB	_SFR_IO8(0x0A)
  75               	#define UCSRA	_SFR_IO8(0x0B)
  76               	#define UDR	_SFR_IO8(0x0C)
  77               	
  78               	/* SPI */
  79               	#define SPCR	_SFR_IO8(0x0D)
  80               	#define SPSR	_SFR_IO8(0x0E)
  81               	#define SPDR	_SFR_IO8(0x0F)
  82               	
  83               	/* Port D */
  84               	#define PIND	_SFR_IO8(0x10)
  85               	#define DDRD	_SFR_IO8(0x11)
  86               	#define PORTD	_SFR_IO8(0x12)
  87               	
  88               	/* Port C */
  89               	#define PINC	_SFR_IO8(0x13)
  90               	#define DDRC	_SFR_IO8(0x14)
  91               	#define PORTC	_SFR_IO8(0x15)
  92               	
  93               	/* Port B */
  94               	#define PINB	_SFR_IO8(0x16)
  95               	#define DDRB	_SFR_IO8(0x17)
  96               	#define PORTB	_SFR_IO8(0x18)
  97               	
  98               	/* EEPROM Control Register */
  99               	#define EECR	_SFR_IO8(0x1C)
 100               	
 101               	/* EEPROM Data Register */
 102               	#define EEDR	_SFR_IO8(0x1D)
 103               	
 104               	/* EEPROM Address Register */
 105               	#define EEAR	_SFR_IO16(0x1E)
 106               	#define EEARL	_SFR_IO8(0x1E)
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 10


 107               	#define EEARH	_SFR_IO8(0x1F)
 108               	
 109               	#define UCSRC	_SFR_IO8(0x20)
 110               	#define UBRRH	_SFR_IO8(0x20)
 111               	
 112               	#define WDTCR	_SFR_IO8(0x21)
 113               	#define ASSR	_SFR_IO8(0x22)
 114               	
 115               	/* Timer 2 */
 116               	#define OCR2	_SFR_IO8(0x23)
 117               	#define TCNT2	_SFR_IO8(0x24)
 118               	#define TCCR2	_SFR_IO8(0x25)
 119               	
 120               	/* Timer 1 */
 121               	#define ICR1	_SFR_IO16(0x26)
 122               	#define ICR1L	_SFR_IO8(0x26)
 123               	#define ICR1H	_SFR_IO8(0x27)
 124               	#define OCR1B	_SFR_IO16(0x28)
 125               	#define OCR1BL	_SFR_IO8(0x28)
 126               	#define OCR1BH	_SFR_IO8(0x29)
 127               	#define OCR1A	_SFR_IO16(0x2A)
 128               	#define OCR1AL	_SFR_IO8(0x2A)
 129               	#define OCR1AH	_SFR_IO8(0x2B)
 130               	#define TCNT1	_SFR_IO16(0x2C)
 131               	#define TCNT1L	_SFR_IO8(0x2C)
 132               	#define TCNT1H	_SFR_IO8(0x2D)
 133               	#define TCCR1B	_SFR_IO8(0x2E)
 134               	#define TCCR1A	_SFR_IO8(0x2F)
 135               	
 136               	#define SFIOR	_SFR_IO8(0x30)
 137               	
 138               	#define OSCCAL	_SFR_IO8(0x31)
 139               	
 140               	/* Timer 0 */
 141               	#define TCNT0	_SFR_IO8(0x32)
 142               	#define TCCR0	_SFR_IO8(0x33)
 143               	
 144               	#define MCUCSR	_SFR_IO8(0x34)
 145               	#define MCUSR   _SFR_IO8(0x34)  /* Defined as an alias for MCUCSR. */
 146               	
 147               	#define MCUCR	_SFR_IO8(0x35)
 148               	
 149               	#define TWCR	_SFR_IO8(0x36)
 150               	
 151               	#define SPMCR	_SFR_IO8(0x37)
 152               	
 153               	#define TIFR	_SFR_IO8(0x38)
 154               	#define TIMSK	_SFR_IO8(0x39)
 155               	
 156               	#define GIFR	_SFR_IO8(0x3A)
 157               	#define GIMSK	_SFR_IO8(0x3B)
 158               	#define GICR	_SFR_IO8(0x3B)   /* Changed in 2486H-AVR-09/02 */
 159               	
 160               	/* 0x3C reserved (OCR0?) */
 161               	
 162               	/* 0x3D..0x3E SP */
 163               	
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 11


 164               	/* 0x3F SREG */
 165               	
 166               	/* Interrupt vectors */
 167               	
 168               	/* External Interrupt Request 0 */
 169               	#define INT0_vect_num		1
 170               	#define INT0_vect			_VECTOR(1)
 171               	#define SIG_INTERRUPT0			_VECTOR(1)
 172               	
 173               	/* External Interrupt Request 1 */
 174               	#define INT1_vect_num		2
 175               	#define INT1_vect			_VECTOR(2)
 176               	#define SIG_INTERRUPT1			_VECTOR(2)
 177               	
 178               	/* Timer/Counter2 Compare Match */
 179               	#define TIMER2_COMP_vect_num	3
 180               	#define TIMER2_COMP_vect		_VECTOR(3)
 181               	#define SIG_OUTPUT_COMPARE2		_VECTOR(3)
 182               	
 183               	/* Timer/Counter2 Overflow */
 184               	#define TIMER2_OVF_vect_num		4
 185               	#define TIMER2_OVF_vect			_VECTOR(4)
 186               	#define SIG_OVERFLOW2			_VECTOR(4)
 187               	
 188               	/* Timer/Counter1 Capture Event */
 189               	#define TIMER1_CAPT_vect_num	5
 190               	#define TIMER1_CAPT_vect		_VECTOR(5)
 191               	#define SIG_INPUT_CAPTURE1		_VECTOR(5)
 192               	
 193               	/* Timer/Counter1 Compare Match A */
 194               	#define TIMER1_COMPA_vect_num	6
 195               	#define TIMER1_COMPA_vect		_VECTOR(6)
 196               	#define SIG_OUTPUT_COMPARE1A		_VECTOR(6)
 197               	
 198               	/* Timer/Counter1 Compare Match B */
 199               	#define TIMER1_COMPB_vect_num	7
 200               	#define TIMER1_COMPB_vect		_VECTOR(7)
 201               	#define SIG_OUTPUT_COMPARE1B		_VECTOR(7)
 202               	
 203               	/* Timer/Counter1 Overflow */
 204               	#define TIMER1_OVF_vect_num		8
 205               	#define TIMER1_OVF_vect			_VECTOR(8)
 206               	#define SIG_OVERFLOW1			_VECTOR(8)
 207               	
 208               	/* Timer/Counter0 Overflow */
 209               	#define TIMER0_OVF_vect_num		9
 210               	#define TIMER0_OVF_vect			_VECTOR(9)
 211               	#define SIG_OVERFLOW0			_VECTOR(9)
 212               	
 213               	/* Serial Transfer Complete */
 214               	#define SPI_STC_vect_num		10
 215               	#define SPI_STC_vect			_VECTOR(10)
 216               	#define SIG_SPI				_VECTOR(10)
 217               	
 218               	/* USART, Rx Complete */
 219               	#define USART_RXC_vect_num		11
 220               	#define USART_RXC_vect			_VECTOR(11)
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 12


 221               	#define SIG_UART_RECV			_VECTOR(11)
 222               	
 223               	/* USART Data Register Empty */
 224               	#define USART_UDRE_vect_num		12
 225               	#define USART_UDRE_vect			_VECTOR(12)
 226               	#define SIG_UART_DATA			_VECTOR(12)
 227               	
 228               	/* USART, Tx Complete */
 229               	#define USART_TXC_vect_num		13
 230               	#define USART_TXC_vect			_VECTOR(13)
 231               	#define SIG_UART_TRANS			_VECTOR(13)
 232               	
 233               	/* ADC Conversion Complete */
 234               	#define ADC_vect_num		14
 235               	#define ADC_vect			_VECTOR(14)
 236               	#define SIG_ADC				_VECTOR(14)
 237               	
 238               	/* EEPROM Ready */
 239               	#define EE_RDY_vect_num		15
 240               	#define EE_RDY_vect			_VECTOR(15)
 241               	#define SIG_EEPROM_READY		_VECTOR(15)
 242               	
 243               	/* Analog Comparator */
 244               	#define ANA_COMP_vect_num		16
 245               	#define ANA_COMP_vect			_VECTOR(16)
 246               	#define SIG_COMPARATOR			_VECTOR(16)
 247               	
 248               	/* 2-wire Serial Interface */
 249               	#define TWI_vect_num			17
 250               	#define TWI_vect			_VECTOR(17)
 251               	#define SIG_2WIRE_SERIAL		_VECTOR(17)
 252               	
 253               	/* Store Program Memory Ready */
 254               	#define SPM_RDY_vect_num		18
 255               	#define SPM_RDY_vect			_VECTOR(18)
 256               	#define SIG_SPM_READY			_VECTOR(18)
 257               	
 258               	#define _VECTORS_SIZE 38
 259               	
 260               	/* Bit numbers */
 261               	
 262               	/* GIMSK / GICR */
 263               	#define INT1	7
 264               	#define INT0	6
 265               	#define IVSEL	1
 266               	#define IVCE	0
 267               	
 268               	/* GIFR */
 269               	#define INTF1	7
 270               	#define INTF0	6
 271               	
 272               	/* TIMSK */
 273               	#define OCIE2	7
 274               	#define TOIE2	6
 275               	#define TICIE1	5
 276               	#define OCIE1A	4
 277               	#define OCIE1B	3
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 13


 278               	#define TOIE1	2
 279               	/* bit 1 reserved (OCIE0?) */
 280               	#define TOIE0	0
 281               	
 282               	/* TIFR */
 283               	#define OCF2	7
 284               	#define TOV2	6
 285               	#define ICF1	5
 286               	#define OCF1A	4
 287               	#define OCF1B	3
 288               	#define TOV1	2
 289               	/* bit 1 reserved (OCF0?) */
 290               	#define TOV0	0
 291               	
 292               	/* SPMCR */
 293               	#define SPMIE	7
 294               	#define RWWSB	6
 295               	/* bit 5 reserved */
 296               	#define RWWSRE	4
 297               	#define BLBSET	3
 298               	#define PGWRT	2
 299               	#define PGERS	1
 300               	#define SPMEN	0
 301               	
 302               	/* TWCR */
 303               	#define TWINT	7
 304               	#define TWEA	6
 305               	#define TWSTA	5
 306               	#define TWSTO	4
 307               	#define TWWC	3
 308               	#define TWEN	2
 309               	/* bit 1 reserved (TWI_TST?) */
 310               	#define TWIE	0
 311               	
 312               	/* TWAR */
 313               	#define TWA6    7
 314               	#define TWA5    6
 315               	#define TWA4    5
 316               	#define TWA3    4
 317               	#define TWA2    3
 318               	#define TWA1    2
 319               	#define TWA0    1
 320               	#define TWGCE	0
 321               	
 322               	/* TWSR */
 323               	#define TWS7	7
 324               	#define TWS6	6
 325               	#define TWS5	5
 326               	#define TWS4	4
 327               	#define TWS3	3
 328               	/* bit 2 reserved */
 329               	#define TWPS1	1
 330               	#define TWPS0	0
 331               	
 332               	/* MCUCR */
 333               	#define SE	7
 334               	#define SM2	6
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 14


 335               	#define SM1	5
 336               	#define SM0	4
 337               	#define ISC11	3
 338               	#define ISC10	2
 339               	#define ISC01	1
 340               	#define ISC00	0
 341               	
 342               	/* MCUCSR */
 343               	/* bits 7-4 reserved */
 344               	#define WDRF	3
 345               	#define BORF	2
 346               	#define EXTRF	1
 347               	#define PORF	0
 348               	
 349               	/* 
 350               	   The ADHSM bit has been removed from all documentation, 
 351               	   as being not needed at all since the comparator has proven 
 352               	   to be fast enough even without feeding it more power.
 353               	*/
 354               	
 355               	/* SFIOR */
 356               	/* bits 7-5 reserved */
 357               	#define ACME	3
 358               	#define PUD	2
 359               	#define PSR2	1
 360               	#define PSR10	0
 361               	
 362               	/* TCCR0 */
 363               	/* bits 7-3 reserved */
 364               	#define CS02	2
 365               	#define CS01	1
 366               	#define CS00	0
 367               	
 368               	/* TCCR2 */
 369               	#define FOC2	7
 370               	#define WGM20	6
 371               	#define COM21	5
 372               	#define COM20	4
 373               	#define WGM21	3
 374               	#define CS22	2
 375               	#define CS21	1
 376               	#define CS20	0
 377               	
 378               	/* ASSR */
 379               	/* bits 7-4 reserved */
 380               	#define AS2	3
 381               	#define TCN2UB	2
 382               	#define OCR2UB	1
 383               	#define TCR2UB	0
 384               	
 385               	/* TCCR1A */
 386               	#define COM1A1	7
 387               	#define COM1A0	6
 388               	#define COM1B1	5
 389               	#define COM1B0	4
 390               	#define FOC1A	3
 391               	#define FOC1B	2
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 15


 392               	#define WGM11	1
 393               	#define WGM10	0
 394               	
 395               	/* TCCR1B */
 396               	#define ICNC1	7
 397               	#define ICES1	6
 398               	/* bit 5 reserved */
 399               	#define WGM13	4
 400               	#define WGM12	3
 401               	#define CS12	2
 402               	#define CS11	1
 403               	#define CS10	0
 404               	
 405               	/* WDTCR */
 406               	/* bits 7-5 reserved */
 407               	#define WDCE	4
 408               	#define WDE	3
 409               	#define WDP2	2
 410               	#define WDP1	1
 411               	#define WDP0	0
 412               	
 413               	/* UBRRH */
 414               	#define URSEL	7
 415               	
 416               	/* UCSRC */
 417               	#define URSEL	7
 418               	#define UMSEL	6
 419               	#define UPM1	5
 420               	#define UPM0	4
 421               	#define USBS	3
 422               	#define UCSZ1	2
 423               	#define UCSZ0	1
 424               	#define UCPOL	0
 425               	
 426               	/* PORTB */
 427               	#define PB7	7
 428               	#define PB6	6
 429               	#define PB5	5
 430               	#define PB4	4
 431               	#define PB3	3
 432               	#define PB2	2
 433               	#define PB1	1
 434               	#define PB0	0
 435               	
 436               	/* DDRB */
 437               	#define DDB7	7
 438               	#define DDB6	6
 439               	#define DDB5	5
 440               	#define DDB4	4
 441               	#define DDB3	3
 442               	#define DDB2	2
 443               	#define DDB1	1
 444               	#define DDB0	0
 445               	
 446               	/* PINB */
 447               	#define PINB7	7
 448               	#define PINB6	6
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 16


 449               	#define PINB5	5
 450               	#define PINB4	4
 451               	#define PINB3	3
 452               	#define PINB2	2
 453               	#define PINB1	1
 454               	#define PINB0	0
 455               	
 456               	/* PORTC */
 457               	#define PC6	 6
 458               	#define PC5	 5
 459               	#define PC4	 4
 460               	#define PC3	 3
 461               	#define PC2	 2
 462               	#define PC1	 1
 463               	#define PC0	 0
 464               	
 465               	/* DDRC */
 466               	#define DDC6	6
 467               	#define DDC5	5
 468               	#define DDC4	4
 469               	#define DDC3	3
 470               	#define DDC2	2
 471               	#define DDC1	1
 472               	#define DDC0	0
 473               	
 474               	/* PINC */
 475               	#define PINC6	6
 476               	#define PINC5	5
 477               	#define PINC4	4
 478               	#define PINC3	3
 479               	#define PINC2	2
 480               	#define PINC1	1
 481               	#define PINC0	0
 482               	
 483               	/* PORTD */
 484               	#define PD7	 7
 485               	#define PD6	 6
 486               	#define PD5	 5
 487               	#define PD4	 4
 488               	#define PD3	 3
 489               	#define PD2	 2
 490               	#define PD1	 1
 491               	#define PD0	 0
 492               	
 493               	/* DDRD */
 494               	#define DDD7	7
 495               	#define DDD6	6
 496               	#define DDD5	5
 497               	#define DDD4	4
 498               	#define DDD3	3
 499               	#define DDD2	2
 500               	#define DDD1	1
 501               	#define DDD0	0
 502               	
 503               	/* PIND */
 504               	#define PIND7	7
 505               	#define PIND6	6
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 17


 506               	#define PIND5	5
 507               	#define PIND4	4
 508               	#define PIND3	3
 509               	#define PIND2	2
 510               	#define PIND1	1
 511               	#define PIND0	0
 512               	
 513               	/* SPSR */
 514               	#define SPIF	7
 515               	#define WCOL	6
 516               	#define SPI2X	0
 517               	
 518               	/* SPCR */
 519               	#define SPIE	7
 520               	#define SPE	6
 521               	#define DORD	5
 522               	#define MSTR	4
 523               	#define CPOL	3
 524               	#define CPHA	2
 525               	#define SPR1	1
 526               	#define SPR0	0
 527               	
 528               	/* UCSRA */
 529               	#define RXC	7
 530               	#define TXC	6
 531               	#define UDRE	5
 532               	#define FE	4
 533               	#define DOR	3
 534               	#define PE	2
 535               	#define U2X	1
 536               	#define MPCM	0
 537               	
 538               	/* UCSRB */
 539               	#define RXCIE	7
 540               	#define TXCIE	6
 541               	#define UDRIE	5
 542               	#define RXEN	4
 543               	#define	TXEN	3
 544               	#define UCSZ2	2
 545               	#define RXB8	1
 546               	#define TXB8	0
 547               	
 548               	/* ACSR */
 549               	#define ACD	7
 550               	#define ACBG	6
 551               	#define ACO	5
 552               	#define ACI	4
 553               	#define ACIE	3
 554               	#define ACIC	2
 555               	#define ACIS1	1
 556               	#define ACIS0	0
 557               	
 558               	/* ADCSR / ADCSRA */
 559               	#define ADEN	7
 560               	#define ADSC	6
 561               	#define ADFR	5
 562               	#define ADIF	4
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 18


 563               	#define ADIE	3
 564               	#define ADPS2	2
 565               	#define ADPS1	1
 566               	#define ADPS0	0
 567               	
 568               	/* ADMUX */
 569               	#define REFS1	7
 570               	#define REFS0	6
 571               	#define ADLAR	5
 572               	/* bit 4 reserved */
 573               	#define MUX3	3
 574               	#define MUX2	2
 575               	#define MUX1	1
 576               	#define MUX0	0
 577               	
 578               	/* EEPROM Control Register */
 579               	#define EERIE   3
 580               	#define EEMWE   2
 581               	#define EEWE    1
 582               	#define EERE    0
 583               	
 584               	/* Constants */
 585               	#define SPM_PAGESIZE 64
 586               	#define RAMSTART         (0x60)
 587               	#define RAMEND		 0x45F
 588               	#define XRAMEND		 RAMEND
 589               	#define E2END		 0x1FF
 590               	#define E2PAGESIZE   4
 591               	#define FLASHEND	 0x1FFF
 592               	
 593               	
 594               	/* Fuses */
 595               	
 596               	#define FUSE_MEMORY_SIZE 2
 597               	
 598               	/* Low Fuse Byte */
 599               	#define FUSE_CKSEL0      (unsigned char)~_BV(0)
 600               	#define FUSE_CKSEL1      (unsigned char)~_BV(1)
 601               	#define FUSE_CKSEL2      (unsigned char)~_BV(2)
 602               	#define FUSE_CKSEL3      (unsigned char)~_BV(3)
 603               	#define FUSE_SUT0        (unsigned char)~_BV(4)
 604               	#define FUSE_SUT1        (unsigned char)~_BV(5)
 605               	#define FUSE_BODEN       (unsigned char)~_BV(6)
 606               	#define FUSE_BODLEVEL    (unsigned char)~_BV(7)
 607               	#define LFUSE_DEFAULT (FUSE_SUT0 & FUSE_CKSEL3 & FUSE_CKSEL2 & FUSE_CKSEL1)
 608               	
 609               	/* High Fuse Byte */
 610               	#define FUSE_BOOTRST     (unsigned char)~_BV(0)
 611               	#define FUSE_BOOTSZ0     (unsigned char)~_BV(1)
 612               	#define FUSE_BOOTSZ1     (unsigned char)~_BV(2)
 613               	#define FUSE_EESAVE      (unsigned char)~_BV(3)
 614               	#define FUSE_CKOPT       (unsigned char)~_BV(4)
 615               	#define FUSE_SPIEN       (unsigned char)~_BV(5)
 616               	#define FUSE_WDTON       (unsigned char)~_BV(6)
 617               	#define FUSE_RSTDISBL    (unsigned char)~_BV(7)
 618               	#define HFUSE_DEFAULT (FUSE_SPIEN & FUSE_BOOTSZ1 & FUSE_BOOTSZ0)
 619               	
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 19


 620               	
 621               	/* Lock Bits */
 622               	#define __LOCK_BITS_EXIST
 623               	#define __BOOT_LOCK_BITS_0_EXIST
 624               	#define __BOOT_LOCK_BITS_1_EXIST 
 625               	
 626               	
 627               	/* Signature */
 628               	#define SIGNATURE_0 0x1E
 629               	#define SIGNATURE_1 0x93
 630               	#define SIGNATURE_2 0x07
 631               	
 632               	
 633               	/* Deprecated items */
 634               	#if !defined(__AVR_LIBC_DEPRECATED_ENABLE__)
 635               	
 636               	#pragma GCC system_header
 637               	
 638               	#pragma GCC poison SIG_INTERRUPT0
 639               	#pragma GCC poison SIG_INTERRUPT1
 640               	#pragma GCC poison SIG_OUTPUT_COMPARE2
 641               	#pragma GCC poison SIG_OVERFLOW2
 642               	#pragma GCC poison SIG_INPUT_CAPTURE1
 643               	#pragma GCC poison SIG_OUTPUT_COMPARE1A
 644               	#pragma GCC poison SIG_OUTPUT_COMPARE1B
 645               	#pragma GCC poison SIG_OVERFLOW1
 646               	#pragma GCC poison SIG_OVERFLOW0
 647               	#pragma GCC poison SIG_SPI
 648               	#pragma GCC poison SIG_UART_RECV
 649               	#pragma GCC poison SIG_UART_DATA
 650               	#pragma GCC poison SIG_UART_TRANS
 651               	#pragma GCC poison SIG_ADC
 652               	#pragma GCC poison SIG_EEPROM_READY
 653               	#pragma GCC poison SIG_COMPARATOR
 654               	#pragma GCC poison SIG_2WIRE_SERIAL
 655               	#pragma GCC poison SIG_SPM_READY
 656               	
 351               	#elif defined (__AVR_ATmega8A__)
 352               	#  include <avr/iom8a.h>
 353               	#elif defined (__AVR_ATmega48__)
 354               	#  include <avr/iom48.h>
 355               	#elif defined (__AVR_ATmega48A__)
 356               	#  include <avr/iom48a.h>
 357               	#elif defined (__AVR_ATmega48PA__)
 358               	#  include <avr/iom48pa.h>
 359               	#elif defined (__AVR_ATmega48PB__)
 360               	#  include <avr/iom48pb.h>
 361               	#elif defined (__AVR_ATmega48P__)
 362               	#  include <avr/iom48p.h>
 363               	#elif defined (__AVR_ATmega88__)
 364               	#  include <avr/iom88.h>
 365               	#elif defined (__AVR_ATmega88A__)
 366               	#  include <avr/iom88a.h>
 367               	#elif defined (__AVR_ATmega88P__)
 368               	#  include <avr/iom88p.h>
 369               	#elif defined (__AVR_ATmega88PA__)
 370               	#  include <avr/iom88pa.h>
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 20


 371               	#elif defined (__AVR_ATmega88PB__)
 372               	#  include <avr/iom88pb.h>
 373               	#elif defined (__AVR_ATmega8515__)
 374               	#  include <avr/iom8515.h>
 375               	#elif defined (__AVR_ATmega8535__)
 376               	#  include <avr/iom8535.h>
 377               	#elif defined (__AVR_AT90S8535__)
 378               	#  include <avr/io8535.h>
 379               	#elif defined (__AVR_AT90C8534__)
 380               	#  include <avr/io8534.h>
 381               	#elif defined (__AVR_AT90S8515__)
 382               	#  include <avr/io8515.h>
 383               	#elif defined (__AVR_AT90S4434__)
 384               	#  include <avr/io4434.h>
 385               	#elif defined (__AVR_AT90S4433__)
 386               	#  include <avr/io4433.h>
 387               	#elif defined (__AVR_AT90S4414__)
 388               	#  include <avr/io4414.h>
 389               	#elif defined (__AVR_ATtiny22__)
 390               	#  include <avr/iotn22.h>
 391               	#elif defined (__AVR_ATtiny26__)
 392               	#  include <avr/iotn26.h>
 393               	#elif defined (__AVR_AT90S2343__)
 394               	#  include <avr/io2343.h>
 395               	#elif defined (__AVR_AT90S2333__)
 396               	#  include <avr/io2333.h>
 397               	#elif defined (__AVR_AT90S2323__)
 398               	#  include <avr/io2323.h>
 399               	#elif defined (__AVR_AT90S2313__)
 400               	#  include <avr/io2313.h>
 401               	#elif defined (__AVR_ATtiny4__)
 402               	#  include <avr/iotn4.h>
 403               	#elif defined (__AVR_ATtiny5__)
 404               	#  include <avr/iotn5.h>
 405               	#elif defined (__AVR_ATtiny9__)
 406               	#  include <avr/iotn9.h>
 407               	#elif defined (__AVR_ATtiny10__)
 408               	#  include <avr/iotn10.h>
 409               	#elif defined (__AVR_ATtiny20__)
 410               	#  include <avr/iotn20.h>
 411               	#elif defined (__AVR_ATtiny40__)
 412               	#  include <avr/iotn40.h>
 413               	#elif defined (__AVR_ATtiny2313__)
 414               	#  include <avr/iotn2313.h>
 415               	#elif defined (__AVR_ATtiny2313A__)
 416               	#  include <avr/iotn2313a.h>
 417               	#elif defined (__AVR_ATtiny13__)
 418               	#  include <avr/iotn13.h>
 419               	#elif defined (__AVR_ATtiny13A__)
 420               	#  include <avr/iotn13a.h>
 421               	#elif defined (__AVR_ATtiny25__)
 422               	#  include <avr/iotn25.h>
 423               	#elif defined (__AVR_ATtiny4313__)
 424               	#  include <avr/iotn4313.h>
 425               	#elif defined (__AVR_ATtiny45__)
 426               	#  include <avr/iotn45.h>
 427               	#elif defined (__AVR_ATtiny85__)
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 21


 428               	#  include <avr/iotn85.h>
 429               	#elif defined (__AVR_ATtiny24__)
 430               	#  include <avr/iotn24.h>
 431               	#elif defined (__AVR_ATtiny24A__)
 432               	#  include <avr/iotn24a.h>
 433               	#elif defined (__AVR_ATtiny44__)
 434               	#  include <avr/iotn44.h>
 435               	#elif defined (__AVR_ATtiny44A__)
 436               	#  include <avr/iotn44a.h>
 437               	#elif defined (__AVR_ATtiny441__)
 438               	#  include <avr/iotn441.h>
 439               	#elif defined (__AVR_ATtiny84__)
 440               	#  include <avr/iotn84.h>
 441               	#elif defined (__AVR_ATtiny84A__)
 442               	#  include <avr/iotn84a.h> 
 443               	#elif defined (__AVR_ATtiny841__)
 444               	#  include <avr/iotn841.h> 
 445               	#elif defined (__AVR_ATtiny261__)
 446               	#  include <avr/iotn261.h>
 447               	#elif defined (__AVR_ATtiny261A__)
 448               	#  include <avr/iotn261a.h>
 449               	#elif defined (__AVR_ATtiny461__)
 450               	#  include <avr/iotn461.h>
 451               	#elif defined (__AVR_ATtiny461A__)
 452               	#  include <avr/iotn461a.h>
 453               	#elif defined (__AVR_ATtiny861__)
 454               	#  include <avr/iotn861.h>
 455               	#elif defined (__AVR_ATtiny861A__)
 456               	#  include <avr/iotn861a.h>
 457               	#elif defined (__AVR_ATtiny43U__)
 458               	#  include <avr/iotn43u.h>
 459               	#elif defined (__AVR_ATtiny48__)
 460               	#  include <avr/iotn48.h>
 461               	#elif defined (__AVR_ATtiny88__)
 462               	#  include <avr/iotn88.h>
 463               	#elif defined (__AVR_ATtiny828__)
 464               	#  include <avr/iotn828.h>
 465               	#elif defined (__AVR_ATtiny87__)
 466               	#  include <avr/iotn87.h>
 467               	#elif defined (__AVR_ATtiny167__)
 468               	#  include <avr/iotn167.h>
 469               	#elif defined (__AVR_ATtiny1634__)
 470               	#  include <avr/iotn1634.h>
 471               	#elif defined (__AVR_AT90SCR100__)
 472               	#  include <avr/io90scr100.h>
 473               	#elif defined (__AVR_ATxmega8E5__)
 474               	#  include <avr/iox8e5.h>
 475               	#elif defined (__AVR_ATxmega16A4__)
 476               	#  include <avr/iox16a4.h>
 477               	#elif defined (__AVR_ATxmega16A4U__)
 478               	#  include <avr/iox16a4u.h>
 479               	#elif defined (__AVR_ATxmega16C4__)
 480               	#  include <avr/iox16c4.h>
 481               	#elif defined (__AVR_ATxmega16D4__)
 482               	#  include <avr/iox16d4.h>
 483               	#elif defined (__AVR_ATxmega16E5__)
 484               	#  include <avr/iox16e5.h>
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 22


 485               	#elif defined (__AVR_ATxmega32A4__)
 486               	#  include <avr/iox32a4.h>
 487               	#elif defined (__AVR_ATxmega32A4U__)
 488               	#  include <avr/iox32a4u.h>
 489               	#elif defined (__AVR_ATxmega32C3__)
 490               	#  include <avr/iox32c3.h>
 491               	#elif defined (__AVR_ATxmega32C4__)
 492               	#  include <avr/iox32c4.h>
 493               	#elif defined (__AVR_ATxmega32D3__)
 494               	#  include <avr/iox32d3.h>
 495               	#elif defined (__AVR_ATxmega32D4__)
 496               	#  include <avr/iox32d4.h>
 497               	#elif defined (__AVR_ATxmega32E5__)
 498               	#  include <avr/iox32e5.h>
 499               	#elif defined (__AVR_ATxmega64A1__)
 500               	#  include <avr/iox64a1.h>
 501               	#elif defined (__AVR_ATxmega64A1U__)
 502               	#  include <avr/iox64a1u.h>
 503               	#elif defined (__AVR_ATxmega64A3__)
 504               	#  include <avr/iox64a3.h>
 505               	#elif defined (__AVR_ATxmega64A3U__)
 506               	#  include <avr/iox64a3u.h>
 507               	#elif defined (__AVR_ATxmega64A4U__)
 508               	#  include <avr/iox64a4u.h>
 509               	#elif defined (__AVR_ATxmega64B1__)
 510               	#  include <avr/iox64b1.h>
 511               	#elif defined (__AVR_ATxmega64B3__)
 512               	#  include <avr/iox64b3.h>
 513               	#elif defined (__AVR_ATxmega64C3__)
 514               	#  include <avr/iox64c3.h>
 515               	#elif defined (__AVR_ATxmega64D3__)
 516               	#  include <avr/iox64d3.h>
 517               	#elif defined (__AVR_ATxmega64D4__)
 518               	#  include <avr/iox64d4.h>
 519               	#elif defined (__AVR_ATxmega128A1__)
 520               	#  include <avr/iox128a1.h>
 521               	#elif defined (__AVR_ATxmega128A1U__)
 522               	#  include <avr/iox128a1u.h>
 523               	#elif defined (__AVR_ATxmega128A4U__)
 524               	#  include <avr/iox128a4u.h>
 525               	#elif defined (__AVR_ATxmega128A3__)
 526               	#  include <avr/iox128a3.h>
 527               	#elif defined (__AVR_ATxmega128A3U__)
 528               	#  include <avr/iox128a3u.h>
 529               	#elif defined (__AVR_ATxmega128B1__)
 530               	#  include <avr/iox128b1.h>
 531               	#elif defined (__AVR_ATxmega128B3__)
 532               	#  include <avr/iox128b3.h>
 533               	#elif defined (__AVR_ATxmega128C3__)
 534               	#  include <avr/iox128c3.h>
 535               	#elif defined (__AVR_ATxmega128D3__)
 536               	#  include <avr/iox128d3.h>
 537               	#elif defined (__AVR_ATxmega128D4__)
 538               	#  include <avr/iox128d4.h>
 539               	#elif defined (__AVR_ATxmega192A3__)
 540               	#  include <avr/iox192a3.h>
 541               	#elif defined (__AVR_ATxmega192A3U__)
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 23


 542               	#  include <avr/iox192a3u.h>
 543               	#elif defined (__AVR_ATxmega192C3__)
 544               	#  include <avr/iox192c3.h>
 545               	#elif defined (__AVR_ATxmega192D3__)
 546               	#  include <avr/iox192d3.h>
 547               	#elif defined (__AVR_ATxmega256A3__)
 548               	#  include <avr/iox256a3.h>
 549               	#elif defined (__AVR_ATxmega256A3U__)
 550               	#  include <avr/iox256a3u.h>
 551               	#elif defined (__AVR_ATxmega256A3B__)
 552               	#  include <avr/iox256a3b.h>
 553               	#elif defined (__AVR_ATxmega256A3BU__)
 554               	#  include <avr/iox256a3bu.h>
 555               	#elif defined (__AVR_ATxmega256C3__)
 556               	#  include <avr/iox256c3.h>
 557               	#elif defined (__AVR_ATxmega256D3__)
 558               	#  include <avr/iox256d3.h>
 559               	#elif defined (__AVR_ATxmega384C3__)
 560               	#  include <avr/iox384c3.h>
 561               	#elif defined (__AVR_ATxmega384D3__)
 562               	#  include <avr/iox384d3.h>
 563               	#elif defined (__AVR_ATA5702M322__)
 564               	#  include <avr/ioa5702m322.h>
 565               	#elif defined (__AVR_ATA5782__)
 566               	#  include <avr/ioa5782.h>
 567               	#elif defined (__AVR_ATA5790__)
 568               	#  include <avr/ioa5790.h>
 569               	#elif defined (__AVR_ATA5790N__)
 570               	#  include <avr/ioa5790n.h>
 571               	#elif defined (__AVR_ATA5791__)
 572               	#  include <avr/ioa5791.h>
 573               	#elif defined (__AVR_ATA5831__)
 574               	#  include <avr/ioa5831.h>
 575               	#elif defined (__AVR_ATA5272__)
 576               	#  include <avr/ioa5272.h>
 577               	#elif defined (__AVR_ATA5505__)
 578               	#  include <avr/ioa5505.h>
 579               	#elif defined (__AVR_ATA5795__)
 580               	#  include <avr/ioa5795.h>
 581               	#elif defined (__AVR_ATA6285__)
 582               	#  include <avr/ioa6285.h>
 583               	#elif defined (__AVR_ATA6286__)
 584               	#  include <avr/ioa6286.h>
 585               	#elif defined (__AVR_ATA6289__)
 586               	#  include <avr/ioa6289.h>
 587               	#elif defined (__AVR_ATA6612C__)
 588               	#  include <avr/ioa6612c.h>
 589               	#elif defined (__AVR_ATA6613C__)
 590               	#  include <avr/ioa6613c.h>
 591               	#elif defined (__AVR_ATA6614Q__)
 592               	#  include <avr/ioa6614q.h>
 593               	#elif defined (__AVR_ATA6616C__)
 594               	#  include <avr/ioa6616c.h>
 595               	#elif defined (__AVR_ATA6617C__)
 596               	#  include <avr/ioa6617c.h>
 597               	#elif defined (__AVR_ATA664251__)
 598               	#  include <avr/ioa664251.h>
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 24


 599               	#elif defined (__AVR_ATA8210__)
 600               	#  include <avr/ioa8210.h>
 601               	#elif defined (__AVR_ATA8510__)
 602               	#  include <avr/ioa8510.h>
 603               	/* avr1: the following only supported for assembler programs */
 604               	#elif defined (__AVR_ATtiny28__)
 605               	#  include <avr/iotn28.h>
 606               	#elif defined (__AVR_AT90S1200__)
 607               	#  include <avr/io1200.h>
 608               	#elif defined (__AVR_ATtiny15__)
 609               	#  include <avr/iotn15.h>
 610               	#elif defined (__AVR_ATtiny12__)
 611               	#  include <avr/iotn12.h>
 612               	#elif defined (__AVR_ATtiny11__)
 613               	#  include <avr/iotn11.h>
 614               	#elif defined (__AVR_M3000__)
 615               	#  include <avr/iom3000.h>
 616               	#elif defined (__AVR_DEV_LIB_NAME__)
 617               	#  define __concat__(a,b) a##b
 618               	#  define __header1__(a,b) __concat__(a,b)
 619               	#  define __AVR_DEVICE_HEADER__ <avr/__header1__(io,__AVR_DEV_LIB_NAME__).h>
 620               	#  include __AVR_DEVICE_HEADER__
 621               	#else
 622               	#  if !defined(__COMPILING_AVR_LIBC__)
 623               	#    warning "device type not defined"
 624               	#  endif
 625               	#endif
 626               	
 627               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 628               	
 629               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 630               	
 631               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 632               	
 633               	#if __AVR_ARCH__ >= 100
 634               	#  include <avr/xmega.h>
 635               	#endif
 636               	
 637               	/* Include fuse.h after individual IO header files. */
 638               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 639               	
 640               	/* Include lock.h after individual IO header files. */
 641               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 642               	
  54               	#include "Events.h"
   1               	#ifndef EVENTS_H
  55               			
  56               			.extern fastEventBitmask    ; This is the flag used to indicate to the rest
  57               										; of the system that the line is complete
  58               									
  59               	#define HREF_INTERRUPT_ENABLE_MASK   0x80
  60               	#define HREF_INTERRUPT_DISABLE_MASK  0x7F
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 25


  61               	#define ENABLE_PCLK_TIMER1_OVERFLOW_BITMASK  0x04
  62               	#define DISABLE_PCLK_TIMER1_OVERFLOW_BITMASK 0xFB
  63               	#define G_PORT						_SFR_IO_ADDR(PINC)  
  64               	#define RB_PORT						_SFR_IO_ADDR(PINB)  
  65               	#define PIXEL_RUN_START_INITIAL     0x50     	; This value causes our pixel counter (TCNT1)
  66               													; to overflow after 176 (horizontal) pixels
  67               	
  68               	#define RED_MEM_OFFSET				0x00
  69               	#define GREEN_MEM_OFFSET			0x10
  70               	#define BLUE_MEM_OFFSET				0x20
  71               	
  72               	; A pixelBlock is defined as a contiguous group of 4 pixels that are combined 
  73               	; together to form a specific color.  Typically, this is formed by sampling a
  74               	; a green value, followed by a red and blue value (since we are dealing
  75               	; with Bayer color data).  We could optionally sample a second green with
  76               	; the red and average the greens, because the eye is more sensitive to
  77               	; green, but for speed we don't do this.  These three values (RGB) are then
  78               	; used as indices into the color membership lookup table (memLookup) to
  79               	; determine which color the pixelBlock maps into.  The memLookup table is
  80               	; manually generated for now (though it will hopefully be modified over
  81               	; the serial interface eventually).
  82               	;
  83               	; Here is a pixel block:
  84               	; ...G  G  G  G...  (row x)
  85               	; ...B  R  B  R...  (row x+1)
  86               	;    |  |  |  |--this is skipped 
  87               	;    |  |  |--this is skipped
  88               	;    |  |--this is sampled
  89               	;    |--this is sampled
  90               	
  91               	; As pixel blocks are sampled, the red, green, and blue values are
  92               	; used to index into their respective color maps.  The color maps
  93               	; return values that can be logically ANDed together so that a 
  94               	; particular RGB triplet will result in a single bit being set
  95               	; after the AND operation.  This single bit indicates which color
  96               	; the RGB triplet represents.  It is also possible for no bits to
  97               	; be set after the AND process, indicating that the RGB triplet
  98               	; does not map to any of the colors configured in the color map.
  99               	; This isn't quite as fast as a pure RGB lookup table, but
 100               	; it then again it doesn't require 2^12 (4-bits for each color
 101               	; channel) bytes to store the lookup table.  It takes just a few
 102               	; more cycles, and only requires 48 bytes of precious RAM (16
 103               	; per color channel, since our resolution on each color channel
 104               	; is only 4-bits).  Not bad....for more information, see:
 105               	; http://www.cs.cmu.edu/~trb/papers/wirevision00.pdf for more
 106               	; information on this color segmentation technique.
 107               	
 108               	; One other note: this code does depend on the colorMap residing
 109               	; at a well-defined position in memory; specifically, it mus
 110               	; start at a 256-byte boundary so that the lowest byte in the
 111               	; map is set to 0x00.  Currently, the colorMap is forced to
 112               	; start at RAM location 0x300.  This could potentially be changed
 113               	; by the developer if needed, but offsets would have to be added
 114               	; in to the colorMap look-up code below to make it work.
 115               	
 116               	
 117               	; These are the registers that will be used throughout this
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 26


 118               	; module for acquiring each line of pixel data
 119               	pixelCount			= 16
 120               	pixelRunStart		= 17
 121               	lastColor     		= 18
 122               	tmp1				= 19	; be sure to not use tmp1 and color simultaneously
 123               	tmp2				= 20
 124               	color           	= 19
 125               	greenData       	= 20
 126               	blueData        	= 21
 127               	colorMapLow	  		= 22
 128               	colorMapHigh		= 23
 129               	prevLineBuffLow  	= 22  	; overlaps with memLookupLow (but orthogonal)
 130               	prevLineBuffHigh	= 23	; overlaps with memLookupHigh (but orthogonal)
 131               	currLineBuffLow     = 24
 132               	currLineBuffHigh  	= 25
 133               	
 134               	        .section .text
 135               	
 136               	; These are the global assembly function names that are accessed via other
 137               	; C functions
 138               	        .global CamIntAsm_waitForNewTrackingFrame
 139               			.global CamIntAsm_waitForNewDumpFrame
 140               			.global CamIntAsm_acquireDumpLine
 141               			.global CamIntAsm_acquireTrackingLine
 142               			.global INT0_vect
 143               			.global INT1_vect
 144               			.global TIMER0_OVF_vect
 145               			.global TIMER1_OVF_vect
 146               			
 147               	;*****************************************************************		
 148               	;   	Function Name: CamIntAsm_waitForNewTrackingFrame
 149               	;       Function Description: This function is responsible for
 150               	;       going to sleep until a new frame begins (indicated by
 151               	;    	VSYNC transitioning from low to high.  This will wake
 152               	;       the "VSYNC sleep" up and allow it to continue with 
 153               	;       the acquireLine function, where the system waits for
 154               	;       an "HREF sleep" that we use to synchronize with the
 155               	;       data.  
 156               	;       Inputs:  r25 - MSB of currentLineBuffer
 157               	;                r24 - LSB of currentLineBuffer
 158               	;				 r23 - MSB of colorMap
 159               	; 				 r22 - LSB of colorMap
 160               	;       Outputs: none
 161               	;       NOTES: This function doesn't really return...it sorta just
 162               	;       floats into the acquireLine function after the "VSYNC sleep"
 163               	;       is awoken, then begins processing the line data.  Once
 164               	;		176 pixels are sampled (and the counter overflows), then
 165               	;		an interrupt will occur, the 'T' bit in the SREG will be
 166               	;		set, and the function will return.
 167               	;*****************************************************************
 168               			
 169               	CamIntAsm_waitForNewTrackingFrame:
 170:CamInterfaceAsm.S **** 		sbi		_SFR_IO_ADDR(PORTD),PD6  ; For testing...
 171:CamInterfaceAsm.S **** 		cbi		_SFR_IO_ADDR(PORTD),PD6		
 172:CamInterfaceAsm.S **** 		sleep
 173               	
 174               	;*****************************************************************
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 27


 175               	; REMEMBER...everything from here on out is critically timed to be
 176               	; synchronized with the flow of pixel data from the camera...
 177               	;*****************************************************************
 178               	
 179               	CamIntAsm_acquireTrackingLine:
 180:CamInterfaceAsm.S **** 		brts	_cleanUp
 181               			;sbi		_SFR_IO_ADDR(PORTD),PD6 ; For testing...
 182               			;cbi		_SFR_IO_ADDR(PORTD),PD6
 183               	        
 184:CamInterfaceAsm.S ****         in      tmp1,_SFR_IO_ADDR(TCCR1B) ; Enable the PCLK line to actually
 185:CamInterfaceAsm.S ****         ori     tmp1, 0x07                 ; feed Timer1
 186:CamInterfaceAsm.S ****         out     _SFR_IO_ADDR(TCCR1B),tmp1 
 187               											; The line is about to start...		
 188:CamInterfaceAsm.S **** 		ldi     pixelCount,0			; Initialize the RLE stats...
 189:CamInterfaceAsm.S **** 		ldi		pixelRunStart,PIXEL_RUN_START_INITIAL  	; Remember, we always calculate
 190               															; the pixel run length as
 191               															; TCNT1L - pixelRunStart
 192               			
 193:CamInterfaceAsm.S **** 		ldi		lastColor,0x00				; clear out the last color before we start
 194               			
 195:CamInterfaceAsm.S **** 		mov   	XH,currLineBuffHigh    	; Load the pointer to the current line
 196:CamInterfaceAsm.S **** 		mov		XL,currLineBuffLow		; buffer into the X pointer regs		 
 197               			
 198:CamInterfaceAsm.S **** 		mov   	ZH,colorMapHigh      	; Load the pointers to the membership
 199:CamInterfaceAsm.S **** 		mov		ZL,colorMapLow			; lookup tables (ZL and YL will be overwritten
 200:CamInterfaceAsm.S **** 		mov 	YH,colorMapHigh	 		; as soon as we start reading data) to Z and Y
 201               			
 202:CamInterfaceAsm.S **** 		in		tmp1, _SFR_IO_ADDR(TIMSK)			; enable TIMER1 to start counting
 203:CamInterfaceAsm.S **** 		ori		tmp1, ENABLE_PCLK_TIMER1_OVERFLOW_BITMASK 	; external PCLK pulses and interrupt on 
 204:CamInterfaceAsm.S **** 		out		_SFR_IO_ADDR(TIMSK),tmp1			; overflow
 205               			
 206:CamInterfaceAsm.S **** 		ldi 	tmp1,PIXEL_RUN_START_INITIAL	; set up the TCNT1 to overflow (and
 207:CamInterfaceAsm.S **** 		ldi 	tmp2,0xFF 						; interrupts) after 176 pixels		
 208:CamInterfaceAsm.S **** 		out 	_SFR_IO_ADDR(TCNT1H),tmp2		
 209:CamInterfaceAsm.S **** 		out 	_SFR_IO_ADDR(TCNT1L),tmp1				
 210               			
 211:CamInterfaceAsm.S **** 		mov		YL,colorMapLow		
 212               			
 213:CamInterfaceAsm.S **** 		in 		tmp1, _SFR_IO_ADDR(GICR)	; enable the HREF interrupt...remember, we
 214               												; only use this interrupt to synchronize
 215               												; the beginning of the line
 216:CamInterfaceAsm.S **** 		ori 	tmp1, HREF_INTERRUPT_ENABLE_MASK
 217:CamInterfaceAsm.S **** 		out		_SFR_IO_ADDR(GICR), tmp1
 218               			
 219               	;*******************************************************************************************
 220               	;   Track Frame handler 
 221               	;*******************************************************************************************		
 222               			
 223               	_trackFrame:		
 224:CamInterfaceAsm.S **** 		sbi		_SFR_IO_ADDR(PORTD),PD6
 225:CamInterfaceAsm.S **** 		sleep   ; ...And we wait...
 226               			
 227               		; Returning from the interrupt/sleep wakeup will consume
 228               		; 14 clock cycles (7 to wakeup from idle sleep, 3 to vector, and 4 to return)	
 229               	
 230               		; Disable the HREF interrupt
 231:CamInterfaceAsm.S **** 		cbi		_SFR_IO_ADDR(PORTD),PD6
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 28


 232:CamInterfaceAsm.S **** 		in 		tmp1, _SFR_IO_ADDR(GICR)
 233:CamInterfaceAsm.S **** 		andi 	tmp1, HREF_INTERRUPT_DISABLE_MASK
 234:CamInterfaceAsm.S **** 		out		_SFR_IO_ADDR(GICR), tmp1
 235               			
 236               		; A couple of NOPs are needed here to sync up the pixel data...the number (2)
 237               		; of NOPs was determined emperically by trial and error.
 238:CamInterfaceAsm.S **** 		nop
 239:CamInterfaceAsm.S **** 		nop
 240               	_acquirePixelBlock:							;							Clock Cycle Count
 241:CamInterfaceAsm.S **** 		in		ZL,RB_PORT         			; sample the red value (PINB)		(1)
 242:CamInterfaceAsm.S **** 		in		YL,G_PORT         			; sample the green value (PINC)		(1)
 243:CamInterfaceAsm.S **** 		andi	YL,0x0F            			; clear the high nibble				(1)
 244:CamInterfaceAsm.S **** 		ldd		color,Z+RED_MEM_OFFSET  	; lookup the red membership			(2)
 245:CamInterfaceAsm.S **** 		in		ZL,RB_PORT         			; sample the blue value (PINB)		(1)
 246:CamInterfaceAsm.S **** 		ldd		greenData,Y+GREEN_MEM_OFFSET; lookup the green membership		(2)
 247:CamInterfaceAsm.S **** 		ldd		blueData,Z+BLUE_MEM_OFFSET	; lookup the blue membership		(2)
 248:CamInterfaceAsm.S **** 		and		color,greenData 			; mask memberships together			(1)
 249:CamInterfaceAsm.S **** 		and		color,blueData  			; to produce the final color		(1)
 250:CamInterfaceAsm.S **** 		brts    _cleanUpTrackingLine		; if some interrupt routine has		(1...not set)
 251               												; come in and set our T flag in 
 252               												; SREG, then we need to hop out
 253               												; and blow away this frames data (common cleanup)									
 254:CamInterfaceAsm.S **** 		cp		color,lastColor     		; check to see if the run continues	(1)
 255:CamInterfaceAsm.S **** 		breq    _acquirePixelBlock  		;									(2...equal)
 256               												;									___________
 257               												;								16 clock cycles 		
 258               												; (16 clock cycles = 1 uS = 1 pixelBlock time)
 259               			
 260               			; Toggle the debug line to indicate a color change
 261:CamInterfaceAsm.S **** 		sbi     _SFR_IO_ADDR(PORTD),PD6
 262:CamInterfaceAsm.S **** 		nop
 263:CamInterfaceAsm.S **** 		cbi		_SFR_IO_ADDR(PORTD),PD6
 264               			
 265:CamInterfaceAsm.S **** 		mov		tmp2,pixelRunStart				; get the count value of the
 266               													; current pixel run
 267:CamInterfaceAsm.S **** 		in		pixelCount,_SFR_IO_ADDR(TCNT1L)	; get the current TCNT1 value 
 268:CamInterfaceAsm.S **** 		mov   	pixelRunStart,pixelCount		; reload pixelRunStart for the
 269               													; next run
 270:CamInterfaceAsm.S **** 		sub		pixelCount,tmp2     			; pixelCount = TCNT1L - pixelRunStart
 271               											
 272:CamInterfaceAsm.S **** 		st		X+,lastColor			; record the color run in the current line buffer
 273:CamInterfaceAsm.S **** 		st		X+,pixelCount			; with its length
 274:CamInterfaceAsm.S **** 		mov		lastColor,color			; set lastColor so we can figure out when it changes
 275               			
 276:CamInterfaceAsm.S **** 		nop								; waste one more cycle for a total of 16
 277:CamInterfaceAsm.S **** 		rjmp	_acquirePixelBlock	
 278               			
 279               	; _cleanUpTrackingLine is used to write the last run length block off to the currentLineBuffer so
 280               	; that all 176 pixels in the line are accounted for.
 281               	_cleanUpTrackingLine:		
 282:CamInterfaceAsm.S **** 		ldi		pixelCount,0xFF		; the length of the last run is ALWAYS 0xFF minus the last
 283:CamInterfaceAsm.S **** 		sub		pixelCount,pixelRunStart  	; pixelRunStart
 284               			
 285:CamInterfaceAsm.S **** 		inc		pixelCount				; increment pixelCount since we actually need to account
 286               											; for the overflow of TCNT1
 287               											
 288:CamInterfaceAsm.S **** 		st		X+,color				; record the color run in the current line buffer
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 29


 289:CamInterfaceAsm.S **** 		st		X,pixelCount		
 290:CamInterfaceAsm.S **** 		rjmp	_cleanUp
 291               			
 292               	_cleanUpDumpLine:		
 293               			; NOTE: If serial data is received, to interrupt the tracking of a line, we'll
 294               			; get a EV_SERIAL_DATA_RECEIVED event, and the T bit set so we will end the
 295               			; line's processing...however, the PCLK will keep on ticking for the rest of
 296               			; the frame/line, which will cause the TCNT to eventually overflow and
 297               			; interrupt us, generating a EV_ACQUIRE_LINE_COMPLETE event.  We don't want
 298               			; this, so we need to actually turn off the PCLK counting each time we exit
 299               			; this loop, and only turn it on when we begin acquiring lines....
 300               	        ; NOT NEEDED FOR NOW...
 301               			;in		tmp1, _SFR_IO_ADDR(TIMSK)			; disable TIMER1 to stop counting
 302               			;andi	tmp1, DISABLE_PCLK_TIMER1_OVERFLOW_BITMASK 	; external PCLK pulses
 303               			;out		_SFR_IO_ADDR(TIMSK),tmp1
 304               	
 305               	_cleanUp:
 306               	        ; Disable the external clocking of the Timer1 counter 
 307:CamInterfaceAsm.S ****         in      tmp1, _SFR_IO_ADDR(TCCR1B)
 308:CamInterfaceAsm.S ****         andi    tmp1, 0xF8
 309:CamInterfaceAsm.S ****         out     _SFR_IO_ADDR(TCCR1B),tmp1
 310               			
 311               			; Toggle the debug line to indicate the line is complete
 312:CamInterfaceAsm.S **** 		sbi     _SFR_IO_ADDR(PORTD),PD6
 313:CamInterfaceAsm.S **** 		cbi		_SFR_IO_ADDR(PORTD),PD6
 314:CamInterfaceAsm.S **** 		clt				; clear out the T bit since we have detected
 315               							; the interruption and are exiting to handle it
 316               	_exit:
 317:CamInterfaceAsm.S **** 		ret
 318               			
 319               	;*****************************************************************		
 320               	;   	Function Name: CamIntAsm_waitForNewDumpFrame
 321               	;       Function Description: This function is responsible for
 322               	;       going to sleep until a new frame begins (indicated by
 323               	;    	VSYNC transitioning from low to high.  This will wake
 324               	;       the "VSYNC sleep" up and allow it to continue with 
 325               	;       acquiring a line of pixel data to dump out to the UI.
 326               	;       Inputs:  r25 - MSB of currentLineBuffer
 327               	;                r24 - LSB of currentLineBuffer
 328               	;				 r23 - MSB of prevLineBuffer
 329               	;				 r22 - LSB of prevLineBuffer
 330               	;       Outputs: none
 331               	;       NOTES: This function doesn't really return...it sorta just
 332               	;       floats into the acquireDumpLine function after the "VSYNC sleep"
 333               	;       is awoken.
 334               	;*****************************************************************		
 335               	CamIntAsm_waitForNewDumpFrame:
 336:CamInterfaceAsm.S **** 		sbi		_SFR_IO_ADDR(PORTD),PD6  ; For testing...
 337:CamInterfaceAsm.S **** 		cbi		_SFR_IO_ADDR(PORTD),PD6
 338:CamInterfaceAsm.S **** 		sleep
 339               	
 340               	;*****************************************************************
 341               	; REMEMBER...everything from here on out is critically timed to be
 342               	; synchronized with the flow of pixel data from the camera...
 343               	;*****************************************************************
 344               	
 345               	CamIntAsm_acquireDumpLine:
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 30


 346:CamInterfaceAsm.S **** 		brts	_cleanUp
 347               			;sbi		_SFR_IO_ADDR(PORTD),PD6 ; For testing...
 348               			;cbi		_SFR_IO_ADDR(PORTD),PD6
 349               			
 350:CamInterfaceAsm.S **** 		mov   	XH,currLineBuffHigh    	; Load the pointer to the current line
 351:CamInterfaceAsm.S **** 		mov		XL,currLineBuffLow		; buffer into the X pointer regs
 352               	
 353:CamInterfaceAsm.S **** 		mov		YH,prevLineBuffHigh		; Load the pointer to the previous line
 354:CamInterfaceAsm.S **** 		mov		YL,prevLineBuffLow  	; buffer into the Y pointer regs
 355               			
 356:CamInterfaceAsm.S **** 		ldi 	tmp1,PIXEL_RUN_START_INITIAL	; set up the TCNT1 to overflow (and
 357:CamInterfaceAsm.S **** 		ldi 	tmp2,0xFF 						; interrupts) after 176 pixels		
 358:CamInterfaceAsm.S **** 		out 	_SFR_IO_ADDR(TCNT1H),tmp2		
 359:CamInterfaceAsm.S **** 		out 	_SFR_IO_ADDR(TCNT1L),tmp1		
 360               			
 361:CamInterfaceAsm.S ****         in      tmp1, _SFR_IO_ADDR(TCCR1B) ; Enable the PCLK line to actually
 362:CamInterfaceAsm.S ****         ori     tmp1, 0x07                 ; feed Timer1
 363:CamInterfaceAsm.S ****         out     _SFR_IO_ADDR(TCCR1B),tmp1
 364:CamInterfaceAsm.S ****         nop
 365               	        
 366:CamInterfaceAsm.S **** 		in		tmp1, _SFR_IO_ADDR(TIMSK)			; enable TIMER1 to start counting
 367:CamInterfaceAsm.S **** 		ori		tmp1, ENABLE_PCLK_TIMER1_OVERFLOW_BITMASK 	; external PCLK pulses and interrupt on 
 368:CamInterfaceAsm.S **** 		out		_SFR_IO_ADDR(TIMSK),tmp1			; overflow			
 369               			
 370:CamInterfaceAsm.S **** 		in 		tmp1, _SFR_IO_ADDR(GICR)	; enable the HREF interrupt...remember, we
 371               												; only use this interrupt to synchronize
 372               												; the beginning of the line
 373:CamInterfaceAsm.S **** 		ori 	tmp1, HREF_INTERRUPT_ENABLE_MASK
 374:CamInterfaceAsm.S **** 		out		_SFR_IO_ADDR(GICR), tmp1
 375               			
 376               	;*******************************************************************************************
 377               	;   Dump Frame handler 
 378               	;*******************************************************************************************		
 379               			
 380               	_dumpFrame:		
 381:CamInterfaceAsm.S **** 		sbi		_SFR_IO_ADDR(PORTD),PD6
 382:CamInterfaceAsm.S **** 		sleep   ; ...And we wait...
 383               	
 384:CamInterfaceAsm.S **** 		cbi		_SFR_IO_ADDR(PORTD),PD6
 385:CamInterfaceAsm.S **** 		in 		tmp1, _SFR_IO_ADDR(GICR)			; disable the HREF interrupt
 386:CamInterfaceAsm.S **** 		andi 	tmp1, HREF_INTERRUPT_DISABLE_MASK  	; so we don't get interrupted
 387:CamInterfaceAsm.S **** 		out		_SFR_IO_ADDR(GICR), tmp1			; while dumping the line
 388               		
 389:CamInterfaceAsm.S **** 		nop		; Remember...if we ever remove the "cbi" instruction above,
 390               					; we need to add two more NOPs to cover this
 391               	    
 392               	; Ok...the following loop needs to run in 8 clock cycles, so we can get every
 393               	; pixel in the line...this shouldn't be a problem, since the PCLK timing was
 394               	; reduced by a factor of 2 whenever we go to dump a line (this is to give us
 395               	; enough time to do the sampling and storing of the pixel data).  In addition,
 396               	; it is assumed that we will have to do some minor processing on the data right
 397               	; before we send it out, like mask off the top 4-bits of each, and then pack both
 398               	; low nibbles into a single byte for transmission...we just don't have time to
 399               	; do that here (only 8 instruction cycles :-)  )
 400               	_sampleDumpPixel:
 401:CamInterfaceAsm.S **** 		in		tmp1,G_PORT				; sample the G value					(1)
 402:CamInterfaceAsm.S **** 		in		tmp2,RB_PORT			; sample the R/B value					(1)
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 31


 403:CamInterfaceAsm.S **** 		st		X+,tmp1					; store to the currLineBuff and inc ptrs(2)
 404:CamInterfaceAsm.S **** 		st		Y+,tmp2					; store to the prevLineBuff and inc ptrs(2)
 405:CamInterfaceAsm.S **** 		brtc	_sampleDumpPixel		; loop back unless flag is set			(2...if not set)
 406               											;									___________
 407               											;									8 cycles normally
 408               																				
 409               			; if we make it here, it means the T flag is set, and we must have been interrupted
 410               			; so we need to exit (what if we were interrupted for serial? should we disable it?)
 411:CamInterfaceAsm.S **** 		rjmp	_cleanUpDumpLine
 412               	
 413               	;***********************************************************
 414               	;	Function Name: <interrupt handler for External Interrupt0> 
 415               	;	Function Description: This function is responsible
 416               	;	for handling a rising edge on the Ext Interrupt 0.  This
 417               	;	routine simply returns, since we just want to wake up
 418               	;	whenever the VSYNC transitions (meaning the start of a new
 419               	;	frame).
 420               	;	Inputs:  none
 421               	;	Outputs: none
 422               	;***********************************************************
 423               	INT0_vect:
 424               	; This will wake us up when VSYNC transitions high...we just want to return
 425:CamInterfaceAsm.S **** 		reti
 426               			
 427               	;***********************************************************
 428               	;	Function Name: <interrupt handler for External Interrupt1> 
 429               	;	Function Description: This function is responsible
 430               	;	for handling a falling edge on the Ext Interrupt 1.  This
 431               	;	routine simply returns, since we just want to wake up
 432               	;	whenever the HREF transitions (meaning the pixels 
 433               	;	are starting after VSYNC transitioned, and we need to
 434               	; 	start acquiring the pixel blocks
 435               	;	Inputs:  none
 436               	;	Outputs: none
 437               	;***********************************************************	
 438               	INT1_vect:
 439               	; This will wake us up when HREF transitions high...we just want to return
 440:CamInterfaceAsm.S **** 		reti
 441               			
 442               	;***********************************************************
 443               	;	Function Name: <interrupt handler for Timer0 overflow>
 444               	;	Function Description: This function is responsible
 445               	;	for handling the Timer0 overflow (hooked up to indicate
 446               	;	when we have reached the number of HREFs required in a
 447               	;	single frame).  We set the T flag in the SREG to
 448               	;	indicate to the _acquirePixelBlock routine that it needs
 449               	;	to exit, and then set the appropriate action to take in
 450               	;	the eventList of the Executive module.
 451               	;	Inputs:  none
 452               	;	Outputs: none
 453               	;   Note: Originally, the HREF pulses were also going to
 454               	;   be counted by a hardware counter, but it didn't end up
 455               	;   being necessary
 456               	;***********************************************************
 457               	;TIMER0_OVF_vect:
 458               	;		set				; set the T bit in SREG
 459               	;		lds		tmp1,eventBitmask
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 32


 460               	;		ori		tmp1,EV_ACQUIRE_FRAME_COMPLETE
 461               	;		sts		eventBitmask,tmp1
 462               	;		reti
 463               			
 464               	;***********************************************************
 465               	;	Function Name: <interrupt handler for Timer1 overflow>
 466               	;	Function Description: This function is responsible
 467               	;	for handling the Timer1 overflow (hooked up to indicate
 468               	;	when we have reached the end of a line of pixel data,
 469               	;	since PCLK is hooked up to overflow TCNT1 after 176 
 470               	;	pixels).  This routine generates an acquire line complete
 471               	;	event in the fastEventBitmask, which is streamlined for
 472               	;	efficiency reasons.
 473               	;***********************************************************
 474               	TIMER0_OVF_vect:				
 475:CamInterfaceAsm.S **** 		lds		tmp1,fastEventBitmask   		; set a flag indicating
 476:CamInterfaceAsm.S **** 		ori		tmp1,FEV_ACQUIRE_LINE_COMPLETE	; a line is complete
 477:CamInterfaceAsm.S **** 		sts		fastEventBitmask,tmp1
 478:CamInterfaceAsm.S **** 		set		; set the T bit in SREG 
 479               			;sbi		_SFR_IO_ADDR(PORTD),PD6 ; For testing...
 480               			;cbi		_SFR_IO_ADDR(PORTD),PD6 ; For testing...
 481               	
 482:CamInterfaceAsm.S **** 		reti
 483               	
 484               	; This is the default handler for all interrupts that don't
 485               	; have handler routines specified for them.
 486               	        .global __vector_default              
 487               	__vector_default:
 488:CamInterfaceAsm.S ****         reti
 489               	
 490               	        .end
GAS LISTING C:\Users\Joe\AppData\Local\Temp\ccXN0txu.s 			page 33


DEFINED SYMBOLS
   CamInterfaceAsm.S:119    *ABS*:00000010 pixelCount
   CamInterfaceAsm.S:120    *ABS*:00000011 pixelRunStart
   CamInterfaceAsm.S:121    *ABS*:00000012 lastColor
   CamInterfaceAsm.S:122    *ABS*:00000013 tmp1
   CamInterfaceAsm.S:123    *ABS*:00000014 tmp2
   CamInterfaceAsm.S:124    *ABS*:00000013 color
   CamInterfaceAsm.S:125    *ABS*:00000014 greenData
   CamInterfaceAsm.S:126    *ABS*:00000015 blueData
   CamInterfaceAsm.S:127    *ABS*:00000016 colorMapLow
   CamInterfaceAsm.S:128    *ABS*:00000017 colorMapHigh
   CamInterfaceAsm.S:129    *ABS*:00000016 prevLineBuffLow
   CamInterfaceAsm.S:130    *ABS*:00000017 prevLineBuffHigh
   CamInterfaceAsm.S:131    *ABS*:00000018 currLineBuffLow
   CamInterfaceAsm.S:132    *ABS*:00000019 currLineBuffHigh
   CamInterfaceAsm.S:169    .text:00000000 CamIntAsm_waitForNewTrackingFrame
   CamInterfaceAsm.S:335    .text:0000008e CamIntAsm_waitForNewDumpFrame
   CamInterfaceAsm.S:345    .text:00000094 CamIntAsm_acquireDumpLine
   CamInterfaceAsm.S:179    .text:00000006 CamIntAsm_acquireTrackingLine
   CamInterfaceAsm.S:423    .text:000000d4 __vector_1
   CamInterfaceAsm.S:438    .text:000000d6 __vector_2
   CamInterfaceAsm.S:474    .text:000000d8 __vector_9
   CamInterfaceAsm.S:305    .text:00000080 _cleanUp
   CamInterfaceAsm.S:223    .text:00000034 _trackFrame
   CamInterfaceAsm.S:240    .text:00000044 _acquirePixelBlock
   CamInterfaceAsm.S:281    .text:00000074 _cleanUpTrackingLine
   CamInterfaceAsm.S:292    .text:00000080 _cleanUpDumpLine
   CamInterfaceAsm.S:316    .text:0000008c _exit
   CamInterfaceAsm.S:380    .text:000000ba _dumpFrame
   CamInterfaceAsm.S:400    .text:000000c8 _sampleDumpPixel
   CamInterfaceAsm.S:487    .text:000000e6 __vector_default

UNDEFINED SYMBOLS
__vector_8
fastEventBitmask
